using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using TMPro;
using UnityEngine;

public class SetAlarm : MonoBehaviour
{
    public static SetAlarm Instance;

    [HideInInspector] public List<Transform> setTransforms;

    private Animator animator;


    [Header("定时类型的下拉框")]
    [SerializeField] private TMP_Dropdown timeTypeDropdown;
    [Header("倒计时输入框")]
    [SerializeField] private TMP_InputField timeInputField;
    [Header("日期输入框")]
    [SerializeField] private TMP_InputField dateInputField;
    [Header("闹钟类型的下拉框")]
    [SerializeField] private TMP_Dropdown alarmTypeDropdown;
    [Header("自定义框")]
    [SerializeField] private GameObject customizeGO;
    private string targetFolderPath = "Resources/AlarmClockSounds";
    [Header("音效试听")]
    [SerializeField] private GameObject audioSourceButton;
    [Header("音效设置")]
    [SerializeField] private AudioSource audioSource;
    private AudioClip alarmClip;
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(Instance);
        }
    }
    void Start()
    {
        animator = GetComponent<Animator>();
        timeTypeDropdown.onValueChanged.AddListener(OnTimeDropdownValueChanged);
        alarmTypeDropdown.onValueChanged.AddListener(OnAlarmDropdownValueChanged);



    }
    void Update()
    {

    }

    /// <summary>
    /// 设置内容为首个todo的设置，以免重复设置一些不需要更改的项
    /// </summary>
    public void SetCurrentAlarmThing()
    {
        TodoManager todomanager = setTransforms[0].GetComponent<TodoManager>();
        alarmTypeDropdown.value = (int)todomanager.alarmType;
        timeTypeDropdown.value = (int)todomanager.timingType;
        DateTime currentDate = DateTime.Now;
        TimeSpan timeRemaining = todomanager.dateTime - currentDate;
        timeInputField.text = ConvertSecondsToTimeString((int)todomanager.countdownTime);
        dateInputField.text = ConvertSecondsToTimeString((int)timeRemaining.TotalSeconds);
        OnAlarmDropdownValueChanged(alarmTypeDropdown.value);
        OnTimeDropdownValueChanged(timeTypeDropdown.value);
    }

    public void PlayAlarmSound()
    {
        if (alarmClip != null && audioSource != null)
        {
            audioSource.clip = alarmClip;
            audioSource.Play();
        }
        else
        {
            TipWindowManager.Instance.ShowTip("铃声或AudioSource为空，无法播放铃声！", Color.red);
        }
    }



    /// <summary>
    /// 打开指定文件夹
    /// </summary>
    public void OpenFolder(string targetFolderPath)
    {
        // 使用 Application.dataPath 获取当前项目的路径
        string folderPath = Path.Combine(Application.dataPath, targetFolderPath);
        folderPath = Path.GetFullPath(folderPath);

        if (Directory.Exists(folderPath))
        {
            // Windows 操作系统
#if UNITY_STANDALONE_WIN
            Process.Start("explorer.exe", folderPath);
#endif

            // macOS 操作系统
#if UNITY_STANDALONE_OSX
        Process.Start("open", folderPath);
#endif

            // Linux 操作系统
#if UNITY_STANDALONE_LINUX
        Process.Start("xdg-open", folderPath);
#endif
        }
        else
        {
            TipWindowManager.Instance.ShowTip("Folder does not exist: " + folderPath, Color.red);
        }
    }

    void OnTimeDropdownValueChanged(int index)
    {
        switch ((TimingType)index)
        {
            case TimingType.None:
                timeInputField.gameObject.SetActive(false);
                dateInputField.gameObject.SetActive(false);
                break;
            case TimingType.Countdown:
                timeInputField.gameObject.SetActive(true);
                dateInputField.gameObject.SetActive(false); break;
            case TimingType.Date:
                timeInputField.gameObject.SetActive(false);
                dateInputField.gameObject.SetActive(true);
                break;
        }
    }

    void OnAlarmDropdownValueChanged(int index)
    {
        audioSource.Stop();

        string soundPath = "AlarmClockSounds/";

        switch ((AlarmType)index)
        {
            case AlarmType.None:
                audioSourceButton.SetActive(false);
                customizeGO.SetActive(false);
                break;
            case AlarmType.Customize:
                soundPath += "Customize";
                alarmClip = Resources.Load<AudioClip>(soundPath);
                if (alarmClip == null)
                {
                    TipWindowManager.Instance.ShowTip("未找到铃声文件: " + soundPath, Color.red);
                }
                audioSourceButton.SetActive(true);
                customizeGO.SetActive(true);
                break;
            case AlarmType.Alarm1:
                soundPath += "Alarm1";
                alarmClip = Resources.Load<AudioClip>(soundPath);
                if (alarmClip == null)
                {
                    TipWindowManager.Instance.ShowTip("未找到铃声文件: " + soundPath, Color.red);
                }
                audioSourceButton.SetActive(true);

                customizeGO.SetActive(false);
                break;
        }
    }

    public void OpenAlarmFile()
    {
        TextEditor te = new TextEditor();
        te.text = "Customize";
        te.SelectAll();
        te.Copy();

        OpenFolder(targetFolderPath);
        TipWindowManager.Instance.ShowTip("已复制文件名。");
    }
    public void SetAlarms()
    {
        int selectedTimeType = timeTypeDropdown.value;
        int selectedAlarmType = alarmTypeDropdown.value;

        int timeValue = GetTimeAndConvertToSeconds(timeInputField);
        DateTime _dateTime = DateTime.Now.AddSeconds(GetTimeAndConvertToSeconds(dateInputField));

        foreach (Transform transform in setTransforms)
        {
            TodoManager todoManager = transform.GetComponent<TodoManager>();
            TimerManager.Instance.UpdateTodoTimerSetting(todoManager, (TimingType)selectedTimeType, (AlarmType)selectedAlarmType, timeValue, _dateTime);
        }
        CloseWindow();

    }
    public void CloseWindow()
    {
        animator.SetBool("IsClose", true);

    }
    public void OpenWindow()
    {
        animator.SetBool("IsClose", false);

    }

    /// <summary>
    /// 字符串转秒
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    public int ConvertTimeToSeconds(string input)
    {
        int totalSeconds = 0;

        string pattern = @"(\d+)(year|mon|day|hour|min|sec)";
        MatchCollection matches = Regex.Matches(input, pattern);

        foreach (Match match in matches)
        {
            string numberStr = match.Groups[1].Value;
            string unit = match.Groups[2].Value.ToLower();

            int number = int.Parse(numberStr);

            // 根据单位进行秒数转换
            switch (unit)
            {
                case "year":
                    totalSeconds += number * 365 * 24 * 60 * 60;
                    break;
                case "mon":
                    totalSeconds += number * 30 * 24 * 60 * 60;
                    break;
                case "day":
                    totalSeconds += number * 24 * 60 * 60;
                    break;
                case "hour":
                    totalSeconds += number * 60 * 60;
                    break;
                case "min":
                    totalSeconds += number * 60;
                    break;
                case "sec":
                    totalSeconds += number;
                    break;
                default:
                    TipWindowManager.Instance.ShowTip("未知的单位 " + unit, Color.red);
                    break;
            }
        }

        return totalSeconds;
    }

    /// <summary>
    /// 秒转字符串
    /// </summary>
    /// <param name="totalSeconds"></param>
    /// <returns></returns>
    public string ConvertSecondsToTimeString(int totalSeconds)
    {
        // 时间单位的秒数
        int years = totalSeconds / (365 * 24 * 60 * 60);
        totalSeconds %= (365 * 24 * 60 * 60);

        int months = totalSeconds / (30 * 24 * 60 * 60);
        totalSeconds %= (30 * 24 * 60 * 60);

        int days = totalSeconds / (24 * 60 * 60);
        totalSeconds %= (24 * 60 * 60);

        int hours = totalSeconds / (60 * 60);
        totalSeconds %= (60 * 60);

        int minutes = totalSeconds / 60;
        totalSeconds %= 60;

        int seconds = totalSeconds;

        // 拼接字符串（没有空格）
        List<string> timeParts = new List<string>();

        if (years > 0)
            timeParts.Add(years + "year");
        if (months > 0)
            timeParts.Add(months + "mon");
        if (days > 0)
            timeParts.Add(days + "day");
        if (hours > 0)
            timeParts.Add(hours + "hour");
        if (minutes > 0)
            timeParts.Add(minutes + "min");
        if (seconds > 0)
            timeParts.Add(seconds + "sec");

        // 返回拼接后的字符串，如果没有任何单位则返回 "0seconds"
        return timeParts.Count > 0 ? string.Join("", timeParts) : "0sec";
    }

    // 获取输入框中的文字，并转换为秒
    public int GetTimeAndConvertToSeconds(TMP_InputField _InputField)
    {
        string inputText = _InputField.text;

        if (string.IsNullOrEmpty(inputText))
        {
            TipWindowManager.Instance.ShowTip("输入框为空", Color.yellow);
            return 0;
        }

        return ConvertTimeToSeconds(inputText);


    }
}
